;ThCartesianDoubleCategory
(datatype TYPE)
(datatype TERM)
(function type (TERM) TYPE)
(function Ob () TYPE)
(function Hom (TERM TERM) TYPE)
(function Pro (TERM TERM) TYPE)
(function Cell (TERM TERM TERM TERM) TYPE)

(function id (TERM) TERM)
(rule ((= goofball (id A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (id A)) (Hom A A) :when ((= (type A) Ob)))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (compose f g)) (Hom A C) :when ((= (type f) (Hom A B)) (= (type g) (Hom B C))))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose α β)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let β_type (type β))))
(rewrite (type (compose α β)) (Cell m p (compose f h) (compose g k)) :when ((= (type α) (Cell m n f g)) (= (type β) (Cell n p h k))))

(function id (TERM) TERM)
(rule ((= goofball (id m)))  ((let goofball_demand (type goofball)) (let m_type (type m))))
(rewrite (type (id m)) (Cell m m (id A) (id B)) :when ((= (type m) (Pro A B))))

(function pcompose (TERM TERM) TERM)
(rule ((= goofball (pcompose m n)))  ((let goofball_demand (type goofball)) (let m_type (type m)) (let n_type (type n))))
(rewrite (type (pcompose m n)) (Pro A C) :when ((= (type m) (Pro A B)) (= (type n) (Pro B C))))

(function pid (TERM) TERM)
(rule ((= goofball (pid A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (pid A)) (Pro A A) :when ((= (type A) Ob)))

(function pcompose (TERM TERM) TERM)
(rule ((= goofball (pcompose α β)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let β_type (type β))))
(rewrite (type (pcompose α β)) (Cell (pcompose m n) (pcompose p q) f h) :when ((= (type α) (Cell m p f g)) (= (type β) (Cell n q g h))))

(function pid (TERM) TERM)
(rule ((= goofball (pid f)))  ((let goofball_demand (type goofball)) (let f_type (type f))))
(rewrite (type (pid f)) (Cell (pid A) (pid B) f f) :when ((= (type f) (Hom A B))))

(function otimes (TERM TERM) TERM)
(rule ((= goofball (otimes A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (otimes A B)) Ob :when ((= (type A) Ob) (= (type B) Ob)))

(function otimes (TERM TERM) TERM)
(rule ((= goofball (otimes f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (otimes f g)) (Hom (otimes A C) (otimes B D)) :when ((= (type f) (Hom A B)) (= (type g) (Hom C D))))

(function munit () TERM)
(rule ((= goofball (munit )))  ((let goofball_demand (type goofball)) ))
(rewrite (type (munit )) Ob :when ())

(function otimes (TERM TERM) TERM)
(rule ((= goofball (otimes m n)))  ((let goofball_demand (type goofball)) (let m_type (type m)) (let n_type (type n))))
(rewrite (type (otimes m n)) (Pro (otimes A C) (otimes B D)) :when ((= (type m) (Pro A B)) (= (type n) (Pro C D))))

(function otimes (TERM TERM) TERM)
(rule ((= goofball (otimes α β)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let β_type (type β))))
(rewrite (type (otimes α β)) (Cell (otimes m m′) (otimes n n′) (otimes f f′) (otimes g g′)) :when ((= (type α) (Cell m n f g)) (= (type β) (Cell m′ n′ f′ g′))))

(function braid (TERM TERM) TERM)
(rule ((= goofball (braid A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (braid A B)) (Hom (otimes A B) (otimes B A)) :when ((= (type A) Ob) (= (type B) Ob)))

(function braid (TERM TERM) TERM)
(rule ((= goofball (braid m n)))  ((let goofball_demand (type goofball)) (let m_type (type m)) (let n_type (type n))))
(rewrite (type (braid m n)) (Cell (otimes m n) (otimes n m) (braid A B) (braid C D)) :when ((= (type m) (Pro A C)) (= (type n) (Pro B D))))

(function pair (TERM TERM) TERM)
(rule ((= goofball (pair f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (pair f g)) (Hom A (otimes B C)) :when ((= (type f) (Hom A B)) (= (type g) (Hom A C))))

(function proj1 (TERM TERM) TERM)
(rule ((= goofball (proj1 A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (proj1 A B)) (Hom (otimes A B) A) :when ((= (type A) Ob) (= (type B) Ob)))

(function proj2 (TERM TERM) TERM)
(rule ((= goofball (proj2 A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (proj2 A B)) (Hom (otimes A B) B) :when ((= (type A) Ob) (= (type B) Ob)))

(function pair (TERM TERM) TERM)
(rule ((= goofball (pair α β)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let β_type (type β))))
(rewrite (type (pair α β)) (Cell m (otimes p q) (pair f g) (pair h k)) :when ((= (type α) (Cell m p f h)) (= (type β) (Cell m q g k))))

(function proj1 (TERM TERM) TERM)
(rule ((= goofball (proj1 m n)))  ((let goofball_demand (type goofball)) (let m_type (type m)) (let n_type (type n))))
(rewrite (type (proj1 m n)) (Cell (otimes m n) m (proj1 A C) (proj1 B D)) :when ((= (type m) (Pro A B)) (= (type n) (Pro C D))))

(function proj2 (TERM TERM) TERM)
(rule ((= goofball (proj2 m n)))  ((let goofball_demand (type goofball)) (let m_type (type m)) (let n_type (type n))))
(rewrite (type (proj2 m n)) (Cell (otimes m n) n (proj2 A C) (proj2 B D)) :when ((= (type m) (Pro A B)) (= (type n) (Pro C D))))


(birewrite (compose (compose f g) h) (compose f (compose g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D))))
(birewrite (compose f (id B)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (id A) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (compose α β) γ) (compose α (compose β γ)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type W) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A W)) (= (type n) (Pro B X)) (= (type p) (Pro C Y)) (= (type q) (Pro D Z)) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D)) (= (type i) (Hom W X)) (= (type j) (Hom X Y)) (= (type k) (Hom Y Z)) (= (type α) (Cell m n f i)) (= (type β) (Cell n p g j)) (= (type γ) (Cell p q h k))))
(birewrite (compose α (id n)) α :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type α) (Cell m n f g))))
(birewrite (compose (id m) α) α :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type α) (Cell m n f g))))
(birewrite (pcompose (pcompose m n) p) (pcompose m (pcompose n p)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro B C)) (= (type p) (Pro C D))))
(birewrite (pcompose m (pid B)) m :when ((= (type A) Ob) (= (type B) Ob) (= (type m) (Pro A B))))
(birewrite (pcompose (pid A) m) m :when ((= (type A) Ob) (= (type B) Ob) (= (type m) (Pro A B))))
(birewrite (pcompose (pcompose α β) γ) (pcompose α (pcompose β γ)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type W) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A B)) (= (type n) (Pro B C)) (= (type p) (Pro C D)) (= (type u) (Pro W X)) (= (type v) (Pro X Y)) (= (type w) (Pro Y Z)) (= (type f) (Hom A W)) (= (type g) (Hom B X)) (= (type h) (Hom C Y)) (= (type k) (Hom D Z)) (= (type α) (Cell m u f g)) (= (type β) (Cell n v g h)) (= (type γ) (Cell p w h k))))
(birewrite (pcompose α (pid g)) α :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type α) (Cell m n f g))))
(birewrite (pcompose (pid f) α) α :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type α) (Cell m n f g))))
(birewrite (otimes (otimes A B) C) (otimes A (otimes B C)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob)))
(birewrite (otimes A (munit )) A :when ((= (type A) Ob)))
(birewrite (otimes (munit ) A) A :when ((= (type A) Ob)))
(birewrite (otimes (otimes f g) h) (otimes f (otimes g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type f) (Hom A X)) (= (type g) (Hom B Y)) (= (type h) (Hom C Z))))
(birewrite (compose (otimes f g) (otimes h k)) (otimes (compose f h) (compose g k)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type f) (Hom A B)) (= (type h) (Hom B C)) (= (type g) (Hom X Y)) (= (type k) (Hom Y Z))))
(birewrite (id (otimes A B)) (otimes (id A) (id B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (otimes (otimes m n) p) (otimes m (otimes n p)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A X)) (= (type n) (Pro B Y)) (= (type p) (Pro C Z))))
(birewrite (otimes m (pid (munit ))) m :when ((= (type A) Ob) (= (type B) Ob) (= (type m) (Pro A B))))
(birewrite (otimes (pid (munit )) m) m :when ((= (type A) Ob) (= (type B) Ob) (= (type m) (Pro A B))))
(birewrite (otimes (otimes α β) γ) (otimes α (otimes β γ)) :when ((= (type A₁) Ob) (= (type A₂) Ob) (= (type A₃) Ob) (= (type B₁) Ob) (= (type B₂) Ob) (= (type B₃) Ob) (= (type C₁) Ob) (= (type C₂) Ob) (= (type C₃) Ob) (= (type D₁) Ob) (= (type D₂) Ob) (= (type D₃) Ob) (= (type f₁) (Hom A₁ C₁)) (= (type f₂) (Hom A₂ C₂)) (= (type f₃) (Hom A₃ C₃)) (= (type g₁) (Hom B₁ D₁)) (= (type g₂) (Hom B₂ D₂)) (= (type g₃) (Hom B₃ D₃)) (= (type m₁) (Pro A₁ B₁)) (= (type m₂) (Pro A₂ B₂)) (= (type m₃) (Pro A₃ B₃)) (= (type n₁) (Pro C₁ D₁)) (= (type n₂) (Pro C₂ D₂)) (= (type n₃) (Pro C₃ D₃)) (= (type α) (Cell m₁ n₁ f₁ g₁)) (= (type β) (Cell m₂ n₂ f₂ g₂)) (= (type γ) (Cell m₃ m₃ f₃ g₃))))
(birewrite (compose (otimes α α′) (otimes β β′)) (otimes (compose α β) (compose α′ β′)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type A′) Ob) (= (type B′) Ob) (= (type C′) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type X′) Ob) (= (type Y′) Ob) (= (type Z′) Ob) (= (type f) (Hom A B)) (= (type g) (Hom X Y)) (= (type f′) (Hom A′ B′)) (= (type g′) (Hom X′ Y′)) (= (type h) (Hom B C)) (= (type k) (Hom Y Z)) (= (type h′) (Hom B′ C′)) (= (type k′) (Hom Y′ Z′)) (= (type m) (Pro A X)) (= (type n) (Pro B Y)) (= (type p) (Pro C Z)) (= (type m′) (Pro A′ X′)) (= (type n′) (Pro B′ Y′)) (= (type p′) (Pro C′ Z′)) (= (type α) (Cell m n f g)) (= (type α′) (Cell m′ n′ f′ g′)) (= (type β) (Cell n p h k)) (= (type β′) (Cell n′ p′ h′ k′))))
(birewrite (id (otimes m n)) (otimes (id m) (id n)) :when ((= (type A) Ob) (= (type B) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type m) (Pro A X)) (= (type n) (Pro B Y))))
(birewrite (pcompose (otimes m n) (otimes p q)) (otimes (pcompose m p) (pcompose n q)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A B)) (= (type p) (Pro B C)) (= (type n) (Pro X Y)) (= (type q) (Pro Y Z))))
(birewrite (pid (otimes A B)) (otimes (pid A) (pid B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (compose (braid A B) (braid B A)) (id (otimes A B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (compose (braid m n) (braid n m)) (id (otimes m n)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A C)) (= (type n) (Pro B D))))
(birewrite (compose (otimes f g) (braid C D)) (compose (braid A B) (otimes g f)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A C)) (= (type g) (Hom B D))))
(birewrite (compose (otimes α β) (braid m′ n′)) (compose (braid m n) (otimes β α)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type A′) Ob) (= (type B′) Ob) (= (type C′) Ob) (= (type D′) Ob) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type f′) (Hom A′ C′)) (= (type g′) (Hom B′ D′)) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type m′) (Pro A′ B′)) (= (type n′) (Pro C′ D′)) (= (type α) (Cell m n f g)) (= (type β) (Cell m′ n′ f′ g′))))
(birewrite (braid A (otimes B C)) (compose (otimes (braid A B) (id C)) (otimes (id B) (braid A C))) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob)))
(birewrite (braid (otimes A B) C) (compose (otimes (id A) (braid B C)) (otimes (braid A C) (id B))) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob)))
(birewrite (braid m (otimes n p)) (compose (otimes (braid m n) (id p)) (otimes (id n) (braid m p))) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A X)) (= (type n) (Pro B Y)) (= (type p) (Pro C Z))))
(birewrite (braid (otimes m n) p) (compose (otimes (id m) (braid n p)) (otimes (braid m p) (id n))) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A X)) (= (type n) (Pro B Y)) (= (type p) (Pro C Z))))
(birewrite (braid (pcompose m n) (pcompose m′ n′)) (pcompose (braid m m′) (braid n n′)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type A′) Ob) (= (type B′) Ob) (= (type C′) Ob) (= (type m) (Pro A B)) (= (type n) (Pro B C)) (= (type m′) (Pro A′ B′)) (= (type n′) (Pro B′ C′))))
(birewrite (braid (pid A) (pid B)) (pid (braid A B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (compose (pair f g) (proj1 B C)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type f) (Hom A B)) (= (type g) (Hom A C))))
(birewrite (compose (pair f g) (proj2 B C)) g :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type f) (Hom A B)) (= (type g) (Hom A C))))
(birewrite (pair (compose h (proj1 B C)) (compose h (proj2 B C))) h :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type h) (Hom A (⊗ B C)))))
(birewrite (pair (pcompose α γ) (pcompose β δ)) (pcompose (pair α β) (pair γ δ)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type P) Ob) (= (type Q) Ob) (= (type W) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type f) (Hom A W)) (= (type g) (Hom A Y)) (= (type h) (Hom B X)) (= (type k) (Hom B Z)) (= (type i) (Hom C P)) (= (type j) (Hom C Q)) (= (type m) (Pro A B)) (= (type n) (Pro B C)) (= (type p) (Pro W X)) (= (type q) (Pro Y Z)) (= (type u) (Pro X P)) (= (type v) (Pro Z Q)) (= (type α) (Cell m p f h)) (= (type β) (Cell m q g k)) (= (type γ) (Cell n u h i)) (= (type δ) (Cell n v k j))))
(birewrite (pair (pid f) (pid g)) (pid (pair f g)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C))))
(birewrite (proj1 (pcompose m n) (pcompose p q)) (pcompose (proj1 m p) (proj2 n q)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A B)) (= (type n) (Pro B C)) (= (type p) (Pro X Y)) (= (type q) (Pro Y Z))))
(birewrite (proj2 (pcompose m n) (pcompose p q)) (pcompose (proj2 m p) (proj2 n q)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A B)) (= (type n) (Pro B C)) (= (type p) (Pro X Y)) (= (type q) (Pro Y Z))))
(birewrite (proj1 (pid A) (pid B)) (pid (proj1 A B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (proj2 (pid A) (pid B)) (pid (proj2 A B)) :when ((= (type A) Ob) (= (type B) Ob)))
