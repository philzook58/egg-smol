;ThDoubleCategoryWithTabulators
(datatype TYPE)
(datatype TERM)
(function type (TERM) TYPE)
(function Ob () TYPE)
(function Hom (TERM TERM) TYPE)
(function Pro (TERM TERM) TYPE)
(function Cell (TERM TERM TERM TERM) TYPE)
(function Tab (TERM) TYPE)

(function id (TERM) TERM)
(rule ((= goofball (id A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (id A)) (Hom A A) :when ((= (type A) Ob)))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (compose f g)) (Hom A C) :when ((= (type f) (Hom A B)) (= (type g) (Hom B C))))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose α β)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let β_type (type β))))
(rewrite (type (compose α β)) (Cell m p (compose f h) (compose g k)) :when ((= (type α) (Cell m n f g)) (= (type β) (Cell n p h k))))

(function id (TERM) TERM)
(rule ((= goofball (id m)))  ((let goofball_demand (type goofball)) (let m_type (type m))))
(rewrite (type (id m)) (Cell m m (id A) (id B)) :when ((= (type m) (Pro A B))))

(function pcompose (TERM TERM) TERM)
(rule ((= goofball (pcompose m n)))  ((let goofball_demand (type goofball)) (let m_type (type m)) (let n_type (type n))))
(rewrite (type (pcompose m n)) (Pro A C) :when ((= (type m) (Pro A B)) (= (type n) (Pro B C))))

(function pid (TERM) TERM)
(rule ((= goofball (pid A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (pid A)) (Pro A A) :when ((= (type A) Ob)))

(function pcompose (TERM TERM) TERM)
(rule ((= goofball (pcompose α β)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let β_type (type β))))
(rewrite (type (pcompose α β)) (Cell (pcompose m n) (pcompose p q) f h) :when ((= (type α) (Cell m p f g)) (= (type β) (Cell n q g h))))

(function pid (TERM) TERM)
(rule ((= goofball (pid f)))  ((let goofball_demand (type goofball)) (let f_type (type f))))
(rewrite (type (pid f)) (Cell (pid A) (pid B) f f) :when ((= (type f) (Hom A B))))

(function tabulator (TERM) TERM)
(rule ((= goofball (tabulator p)))  ((let goofball_demand (type goofball)) (let p_type (type p))))
(rewrite (type (tabulator p)) (Tab p) :when ((= (type p) (Pro A B))))

(function ob (TERM) TERM)
(rule ((= goofball (ob τ)))  ((let goofball_demand (type goofball)) (let τ_type (type τ))))
(rewrite (type (ob τ)) Ob :when ((= (type τ) (Tab p))))

(function proj1 (TERM) TERM)
(rule ((= goofball (proj1 τ)))  ((let goofball_demand (type goofball)) (let τ_type (type τ))))
(rewrite (type (proj1 τ)) (Hom (ob τ) A) :when ((= (type τ) (Tab p))))

(function proj2 (TERM) TERM)
(rule ((= goofball (proj2 τ)))  ((let goofball_demand (type goofball)) (let τ_type (type τ))))
(rewrite (type (proj2 τ)) (Hom (ob τ) B) :when ((= (type τ) (Tab p))))

(function cell (TERM) TERM)
(rule ((= goofball (cell τ)))  ((let goofball_demand (type goofball)) (let τ_type (type τ))))
(rewrite (type (cell τ)) (Cell (pid (ob τ)) p (proj1 τ) (proj2 τ)) :when ((= (type τ) (Tab p))))

(function universal (TERM TERM) TERM)
(rule ((= goofball (universal τ θ)))  ((let goofball_demand (type goofball)) (let τ_type (type τ)) (let θ_type (type θ))))
(rewrite (type (universal τ θ)) (Hom X (ob τ)) :when ((= (type τ) (Tab p)) (= (type θ) (Cell (pid X) p f g))))


(birewrite (compose (compose f g) h) (compose f (compose g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D))))
(birewrite (compose f (id B)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (id A) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (compose α β) γ) (compose α (compose β γ)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type W) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A W)) (= (type n) (Pro B X)) (= (type p) (Pro C Y)) (= (type q) (Pro D Z)) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D)) (= (type i) (Hom W X)) (= (type j) (Hom X Y)) (= (type k) (Hom Y Z)) (= (type α) (Cell m n f i)) (= (type β) (Cell n p g j)) (= (type γ) (Cell p q h k))))
(birewrite (compose α (id n)) α :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type α) (Cell m n f g))))
(birewrite (compose (id m) α) α :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type α) (Cell m n f g))))
(birewrite (pcompose (pcompose m n) p) (pcompose m (pcompose n p)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro B C)) (= (type p) (Pro C D))))
(birewrite (pcompose m (pid B)) m :when ((= (type A) Ob) (= (type B) Ob) (= (type m) (Pro A B))))
(birewrite (pcompose (pid A) m) m :when ((= (type A) Ob) (= (type B) Ob) (= (type m) (Pro A B))))
(birewrite (pcompose (pcompose α β) γ) (pcompose α (pcompose β γ)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type W) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type m) (Pro A B)) (= (type n) (Pro B C)) (= (type p) (Pro C D)) (= (type u) (Pro W X)) (= (type v) (Pro X Y)) (= (type w) (Pro Y Z)) (= (type f) (Hom A W)) (= (type g) (Hom B X)) (= (type h) (Hom C Y)) (= (type k) (Hom D Z)) (= (type α) (Cell m u f g)) (= (type β) (Cell n v g h)) (= (type γ) (Cell p w h k))))
(birewrite (pcompose α (pid g)) α :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type α) (Cell m n f g))))
(birewrite (pcompose (pid f) α) α :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type m) (Pro A B)) (= (type n) (Pro C D)) (= (type f) (Hom A C)) (= (type g) (Hom B D)) (= (type α) (Cell m n f g))))
(birewrite (compose (universal τ θ) (proj1 τ)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type X) Ob) (= (type p) (Pro A B)) (= (type f) (Hom X A)) (= (type g) (Hom X B)) (= (type τ) (Tab p)) (= (type θ) (Cell (pid X) p f g))))
(birewrite (compose (universal τ θ) (proj2 τ)) g :when ((= (type A) Ob) (= (type B) Ob) (= (type X) Ob) (= (type p) (Pro A B)) (= (type f) (Hom X A)) (= (type g) (Hom X B)) (= (type τ) (Tab p)) (= (type θ) (Cell (pid X) p f g))))
(birewrite (compose (pid (universal τ θ)) (cell τ)) θ :when ((= (type A) Ob) (= (type B) Ob) (= (type X) Ob) (= (type p) (Pro A B)) (= (type f) (Hom X A)) (= (type g) (Hom X B)) (= (type τ) (Tab p)) (= (type θ) (Cell (pid X) p f g))))
(birewrite (universal τ (compose (pid h) (cell τ))) h :when ((= (type A) Ob) (= (type B) Ob) (= (type X) Ob) (= (type p) (Pro A B)) (= (type τ) (Tab p)) (= (type h) (Hom X (ob τ)))))
