;ThCategory2
(datatype TYPE)
(datatype TERM)
(function type (TERM) TYPE)
(function Ob () TYPE)
(function Hom (TERM TERM) TYPE)
(function Hom2 (TERM TERM) TYPE)

(function id (TERM) TERM)
(rule ((= goofball (id A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (id A)) (Hom A A) :when ((= (type A) Ob)))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (compose f g)) (Hom A C) :when ((= (type f) (Hom A B)) (= (type g) (Hom B C))))

(function id (TERM) TERM)
(rule ((= goofball (id f)))  ((let goofball_demand (type goofball)) (let f_type (type f))))
(rewrite (type (id f)) (Hom2 f f) :when ((= (type f) (Hom A B))))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose α β)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let β_type (type β))))
(rewrite (type (compose α β)) (Hom2 f h) :when ((= (type α) (Hom2 f g)) (= (type β) (Hom2 g h))))

(function composeH (TERM TERM) TERM)
(rule ((= goofball (composeH α β)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let β_type (type β))))
(rewrite (type (composeH α β)) (Hom2 (compose f h) (compose g k)) :when ((= (type α) (Hom2 f g)) (= (type β) (Hom2 h k))))

(function composeH (TERM TERM) TERM)
(rule ((= goofball (composeH α h)))  ((let goofball_demand (type goofball)) (let α_type (type α)) (let h_type (type h))))
(rewrite (type (composeH α h)) (Hom2 (compose f h) (compose g h)) :when ((= (type α) (Hom2 f g)) (= (type h) (Hom B C))))

(function composeH (TERM TERM) TERM)
(rule ((= goofball (composeH f β)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let β_type (type β))))
(rewrite (type (composeH f β)) (Hom2 (compose f g) (compose f h)) :when ((= (type f) (Hom A B)) (= (type β) (Hom2 g h))))


(birewrite (compose (compose f g) h) (compose f (compose g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D))))
(birewrite (compose f (id B)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (id A) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
