;ThCocartesianCategory
(datatype TYPE)
(datatype TERM)
(function type (TERM) TYPE)
(function Ob () TYPE)
(function Hom (TERM TERM) TYPE)

(function id (TERM) TERM)
(rule ((= goofball (id A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (id A)) (Hom A A) :when ((= (type A) Ob)))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (compose f g)) (Hom A C) :when ((= (type f) (Hom A B)) (= (type g) (Hom B C))))

(function oplus (TERM TERM) TERM)
(rule ((= goofball (oplus A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (oplus A B)) Ob :when ((= (type A) Ob) (= (type B) Ob)))

(function oplus (TERM TERM) TERM)
(rule ((= goofball (oplus f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (oplus f g)) (Hom (oplus A C) (oplus B D)) :when ((= (type f) (Hom A B)) (= (type g) (Hom C D))))

(function mzero () TERM)
(rule ((= goofball (mzero )))  ((let goofball_demand (type goofball)) ))
(rewrite (type (mzero )) Ob :when ())

(function swap (TERM TERM) TERM)
(rule ((= goofball (swap A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (swap A B)) (Hom (oplus A B) (oplus B A)) :when ((= (type A) Ob) (= (type B) Ob)))

(function plus (TERM) TERM)
(rule ((= goofball (plus A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (plus A)) (Hom (oplus A A) A) :when ((= (type A) Ob)))

(function zero (TERM) TERM)
(rule ((= goofball (zero A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (zero A)) (Hom (mzero ) A) :when ((= (type A) Ob)))

(function copair (TERM TERM) TERM)
(rule ((= goofball (copair f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (copair f g)) (Hom (oplus A B) C) :when ((= (type f) (Hom A C)) (= (type g) (Hom B C))))

(function coproj1 (TERM TERM) TERM)
(rule ((= goofball (coproj1 A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (coproj1 A B)) (Hom A (oplus A B)) :when ((= (type A) Ob) (= (type B) Ob)))

(function coproj2 (TERM TERM) TERM)
(rule ((= goofball (coproj2 A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (coproj2 A B)) (Hom B (oplus A B)) :when ((= (type A) Ob) (= (type B) Ob)))


(birewrite (compose (compose f g) h) (compose f (compose g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D))))
(birewrite (compose f (id B)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (id A) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (oplus (plus A) (id A)) (plus A)) (compose (oplus (id A) (plus A)) (plus A)) :when ((= (type A) Ob)))
(birewrite (compose (oplus (zero A) (id A)) (plus A)) (id A) :when ((= (type A) Ob)))
(birewrite (compose (oplus (id A) (zero A)) (plus A)) (id A) :when ((= (type A) Ob)))
(birewrite (plus A) (compose (swap A A) (plus A)) :when ((= (type A) Ob)))
(birewrite (plus (oplus A B)) (compose (oplus (oplus (id A) (swap B A)) (id B)) (oplus (plus A) (plus B))) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (zero (oplus A B)) (oplus (zero A) (zero B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (plus (mzero )) (id (mzero )) :when ())
(birewrite (zero (mzero )) (id (mzero )) :when ())
(birewrite (copair f g) (compose (oplus f g) (plus C)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type f) (Hom A C)) (= (type g) (Hom B C))))
(birewrite (coproj1 A B) (oplus (id A) (zero B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (coproj2 A B) (oplus (zero A) (id B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (compose (plus A) f) (compose (oplus f f) (plus B)) :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (zero A) f) (zero B) :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
