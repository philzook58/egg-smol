;ThCartesianCategory
(datatype TYPE)
(datatype TERM)
(function type (TERM) TYPE)
(function Ob () TYPE)
(function Hom (TERM TERM) TYPE)

(function id (TERM) TERM)
(rule ((= goofball (id A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (id A)) (Hom A A) :when ((= (type A) Ob)))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (compose f g)) (Hom A C) :when ((= (type f) (Hom A B)) (= (type g) (Hom B C))))

(function otimes (TERM TERM) TERM)
(rule ((= goofball (otimes A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (otimes A B)) Ob :when ((= (type A) Ob) (= (type B) Ob)))

;(function otimes (TERM TERM) TERM)
(rule ((= goofball (otimes f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (otimes f g)) (Hom (otimes A C) (otimes B D)) :when ((= (type f) (Hom A B)) (= (type g) (Hom C D))))

(function munit () TERM)
(rule ((= goofball (munit )))  ((let goofball_demand (type goofball)) ))
(rewrite (type (munit )) Ob :when ())

(function braid (TERM TERM) TERM)
(rule ((= goofball (braid A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (braid A B)) (Hom (otimes A B) (otimes B A)) :when ((= (type A) Ob) (= (type B) Ob)))

(function mcopy (TERM) TERM)
(rule ((= goofball (mcopy A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (mcopy A)) (Hom A (otimes A A)) :when ((= (type A) Ob)))

(function delete0 (TERM) TERM)
(rule ((= goofball (delete0 A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (delete0 A)) (Hom A (munit )) :when ((= (type A) Ob)))

(function pair (TERM TERM) TERM)
(rule ((= goofball (pair f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (pair f g)) (Hom A (otimes B C)) :when ((= (type f) (Hom A B)) (= (type g) (Hom A C))))

(function proj1 (TERM TERM) TERM)
(rule ((= goofball (proj1 A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (proj1 A B)) (Hom (otimes A B) A) :when ((= (type A) Ob) (= (type B) Ob)))

(function proj2 (TERM TERM) TERM)
(rule ((= goofball (proj2 A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (proj2 A B)) (Hom (otimes A B) B) :when ((= (type A) Ob) (= (type B) Ob)))


(birewrite (compose (compose f g) h) (compose f (compose g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D))))
(rewrite (compose f (id B)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(rewrite (compose (id A) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (otimes (otimes A B) C) (otimes A (otimes B C)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob)))
(rewrite (otimes (munit ) A) A :when ((= (type A) Ob)))
(rewrite (otimes A (munit )) A :when ((= (type A) Ob)))
(birewrite (otimes (otimes f g) h) (otimes f (otimes g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type f) (Hom A X)) (= (type g) (Hom B Y)) (= (type h) (Hom C Z))))
(rewrite (otimes (id (munit )) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(rewrite (otimes f (id (munit ))) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (otimes f g) (otimes h k)) (otimes (compose f h) (compose g k)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) Ob) (= (type Y) Ob) (= (type Z) Ob) (= (type f) (Hom A B)) (= (type h) (Hom B C)) (= (type g) (Hom X Y)) (= (type k) (Hom Y Z))))
(birewrite (id (otimes A B)) (otimes (id A) (id B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (compose (braid A B) (braid B A)) (id (otimes A B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (braid A (otimes B C)) (compose (otimes (braid A B) (id C)) (otimes (id B) (braid A C))) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob)))
(birewrite (braid (otimes A B) C) (compose (otimes (id A) (braid B C)) (otimes (braid A C) (id B))) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob)))
(birewrite (braid A (munit )) (id A) :when ((= (type A) Ob)))
(birewrite (braid (munit ) A) (id A) :when ((= (type A) Ob)))
(birewrite (compose (otimes f g) (braid B D)) (compose (braid A C) (otimes g f)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom C D))))
(birewrite (compose (mcopy A) (otimes (mcopy A) (id A))) (compose (mcopy A) (otimes (id A) (mcopy A))) :when ((= (type A) Ob)))
(birewrite (compose (mcopy A) (otimes (delete0 A) (id A))) (id A) :when ((= (type A) Ob)))
(birewrite (compose (mcopy A) (otimes (id A) (delete0 A))) (id A) :when ((= (type A) Ob)))
(birewrite (compose (mcopy A) (braid A A)) (mcopy A) :when ((= (type A) Ob)))
(birewrite (mcopy (otimes A B)) (compose (otimes (mcopy A) (mcopy B)) (otimes (otimes (id A) (braid A B)) (id B))) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (delete0 (otimes A B)) (otimes (delete0 A) (delete0 B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (mcopy (munit )) (id (munit )) :when ())
(birewrite (delete0 (munit )) (id (munit )) :when ())
(birewrite (pair f g) (compose (mcopy C) (otimes f g)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type f) (Hom C A)) (= (type g) (Hom C B))))
(birewrite (proj1 A B) (otimes (id A) (delete0 B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (proj2 A B) (otimes (delete0 A) (id B)) :when ((= (type A) Ob) (= (type B) Ob)))
(birewrite (compose f (mcopy B)) (compose (mcopy A) (otimes f f)) :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose f (delete0 B)) (delete0 A) :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
