;ThIndexedMonoidalCategory
(datatype TYPE)
(datatype TERM)
(function type (TERM) TYPE)
(function Ob () TYPE)
(function Hom (TERM TERM) TYPE)
(function Fib (TERM) TYPE)
(function FibHom (TERM TERM) TYPE)

(function id (TERM) TERM)
(rule ((= goofball (id A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (id A)) (Hom A A) :when ((= (type A) Ob)))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (compose f g)) (Hom A C) :when ((= (type f) (Hom A B)) (= (type g) (Hom B C))))

(function id (TERM) TERM)
(rule ((= goofball (id X)))  ((let goofball_demand (type goofball)) (let X_type (type X))))
(rewrite (type (id X)) (FibHom X X) :when ((= (type X) (Fib A))))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose u v)))  ((let goofball_demand (type goofball)) (let u_type (type u)) (let v_type (type v))))
(rewrite (type (compose u v)) (FibHom X Z) :when ((= (type u) (FibHom X Y)) (= (type v) (FibHom Y Z))))

(function act (TERM TERM) TERM)
(rule ((= goofball (act X f)))  ((let goofball_demand (type goofball)) (let X_type (type X)) (let f_type (type f))))
(rewrite (type (act X f)) (Fib B) :when ((= (type X) (Fib A)) (= (type f) (FibHom A B))))

(function act (TERM TERM) TERM)
(rule ((= goofball (act u f)))  ((let goofball_demand (type goofball)) (let u_type (type u)) (let f_type (type f))))
(rewrite (type (act u f)) (FibHom (act X f) (act Y f)) :when ((= (type u) (FibHom X Y)) (= (type f) (FibHom A B))))

(function otimes (TERM TERM) TERM)
(rule ((= goofball (otimes X Y)))  ((let goofball_demand (type goofball)) (let X_type (type X)) (let Y_type (type Y))))
(rewrite (type (otimes X Y)) (Fib A) :when ((= (type X) (Fib A)) (= (type Y) (Fib A))))

(function otimes (TERM TERM) TERM)
(rule ((= goofball (otimes u v)))  ((let goofball_demand (type goofball)) (let u_type (type u)) (let v_type (type v))))
(rewrite (type (otimes u v)) (FibHom (otimes X W) (otimes Y Z)) :when ((= (type u) (FibHom X Y)) (= (type v) (FibHom W Z))))

(function munit (TERM) TERM)
(rule ((= goofball (munit A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (munit A)) (Fib A) :when ((= (type A) Ob)))

(function otimes (TERM TERM TERM) TERM)
(rule ((= goofball (otimes f X Y)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let X_type (type X)) (let Y_type (type Y))))
(rewrite (type (otimes f X Y)) (FibHom (otimes (act X f) (act Y f)) (act (otimes X Y) f)) :when ((= (type f) (FibHom A B)) (= (type X) (Fib A)) (= (type Y) (Fib A))))

(function munit (TERM) TERM)
(rule ((= goofball (munit f)))  ((let goofball_demand (type goofball)) (let f_type (type f))))
(rewrite (type (munit f)) (FibHom (munit B) (act (munit A) f)) :when ((= (type f) (FibHom A B))))


(birewrite (compose (compose f g) h) (compose f (compose g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D))))
(birewrite (compose f (id B)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (id A) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (compose u v) w) (compose u (compose v w)) :when ((= (type A) Ob) (= (type W) (Fib A)) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type Z) (Fib A)) (= (type u) (FibHom W X)) (= (type v) (FibHom X Y)) (= (type w) (FibHom Y Z))))
(birewrite (compose u (id X)) u :when ((= (type A) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type u) (FibHom X Y))))
(birewrite (compose (id X) u) u :when ((= (type A) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type v) (FibHom X Y))))
(birewrite (act (compose u v) f) (compose (act u f) (act v f)) :when ((= (type A) Ob) (= (type B) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type Z) (Fib A)) (= (type f) (FibHom A B)) (= (type u) (FibHom X Y)) (= (type v) (FibHom Y Z))))
(birewrite (act (id X) f) (id (act X f)) :when ((= (type A) Ob) (= (type B) Ob) (= (type X) (Fib A)) (= (type f) (FibHom A B))))
(birewrite (act X (compose f g)) (act (act X f) g) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) (Fib A)) (= (type f) (FibHom A B)) (= (type g) (FibHom A C))))
(birewrite (act u (compose f g)) (act (act u f) g) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type f) (FibHom A B)) (= (type g) (FibHom B C)) (= (type u) (FibHom X Y))))
(birewrite (act X (id A)) X :when ((= (type A) Ob) (= (type X) (Fib A))))
(birewrite (act u (id A)) u :when ((= (type A) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type u) (FibHom X Y))))
(birewrite (otimes (otimes X Y) Z) (otimes X (otimes Y Z)) :when ((= (type A) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type Z) (Fib A))))
(birewrite (otimes (munit A) X) X :when ((= (type A) Ob) (= (type X) (Fib A))))
(birewrite (otimes X (munit A)) X :when ((= (type A) Ob) (= (type X) (Fib A))))
(birewrite (otimes (otimes u v) w) (otimes u (otimes v w)) :when ((= (type A) Ob) (= (type U) (Fib A)) (= (type V) (Fib A)) (= (type W) (Fib A)) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type Z) (Fib A)) (= (type u) (FibHom U X)) (= (type v) (FibHom V Y)) (= (type w) (FibHom W Z))))
(birewrite (otimes (id (munit A)) u) u :when ((= (type A) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type u) (FibHom X Y))))
(birewrite (otimes u (id (munit A))) u :when ((= (type A) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type u) (FibHom X Y))))
(birewrite (compose (otimes t u) (otimes v w)) (otimes (compose t v) (compose u w)) :when ((= (type A) Ob) (= (type U) (Fib A)) (= (type V) (Fib A)) (= (type W) (Fib A)) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type Z) (Fib A)) (= (type t) (FibHom U V)) (= (type v) (FibHom V W)) (= (type u) (FibHom X Y)) (= (type w) (FibHom Y Z))))
(birewrite (id (otimes X Y)) (otimes (id X) (id Y)) :when ((= (type A) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A))))
(birewrite (compose (otimes f X Y) (act (otimes u v) f)) (compose (otimes (act u f) (act v f)) (otimes f Z W)) :when ((= (type A) Ob) (= (type B) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A)) (= (type Z) (Fib A)) (= (type W) (Fib A)) (= (type f) (FibHom A B)) (= (type u) (FibHom X Z)) (= (type v) (FibHom Y W))))
(birewrite (otimes (compose f g) X Y) (compose (otimes g (act X f) (act Y f)) (act (otimes f X Y) g)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type f) (FibHom A B)) (= (type g) (FibHom B C)) (= (type X) (Fib A)) (= (type Y) (Fib A))))
(birewrite (otimes (id A) X Y) (id (otimes X Y)) :when ((= (type A) Ob) (= (type X) (Fib A)) (= (type Y) (Fib A))))
