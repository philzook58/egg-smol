;ThPresheaf
(datatype TYPE)
(datatype TERM)
(function type (TERM) TYPE)
(function Ob () TYPE)
(function Hom (TERM TERM) TYPE)
(function El (TERM) TYPE)

(function id (TERM) TERM)
(rule ((= goofball (id A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (id A)) (Hom A A) :when ((= (type A) Ob)))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (compose f g)) (Hom A C) :when ((= (type f) (Hom A B)) (= (type g) (Hom B C))))

(function coact (TERM TERM) TERM)
(rule ((= goofball (coact f x)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let x_type (type x))))
(rewrite (type (coact f x)) (El A) :when ((= (type f) (Hom A B)) (= (type x) (El B))))


(birewrite (compose (compose f g) h) (compose f (compose g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D))))
(birewrite (compose f (id B)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (id A) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (coact f (coact g x)) (coact (coact f g) x) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type x) (El C))))
(birewrite (coact (id A) x) x :when ((= (type A) Ob) (= (type x) (El A))))
