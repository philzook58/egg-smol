;ThCocompleteCategory
(datatype TYPE)
(datatype TERM)
(function type (TERM) TYPE)
(function Ob () TYPE)
(function Hom (TERM TERM) TYPE)
(function Initial () TYPE)
(function Coproduct (TERM TERM) TYPE)
(function Coequalizer (TERM TERM) TYPE)

(function id (TERM) TERM)
(rule ((= goofball (id A)))  ((let goofball_demand (type goofball)) (let A_type (type A))))
(rewrite (type (id A)) (Hom A A) :when ((= (type A) Ob)))

(function compose (TERM TERM) TERM)
(rule ((= goofball (compose f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (compose f g)) (Hom A C) :when ((= (type f) (Hom A B)) (= (type g) (Hom B C))))

(function initial () TERM)
(rule ((= goofball (initial )))  ((let goofball_demand (type goofball)) ))
(rewrite (type (initial )) (Initial ) :when ())

(function ob (TERM) TERM)
(rule ((= goofball (ob ⊥)))  ((let goofball_demand (type goofball)) (let ⊥_type (type ⊥))))
(rewrite (type (ob ⊥)) Ob :when ((= (type ⊥) (Initial ))))

(function create (TERM TERM) TERM)
(rule ((= goofball (create ⊥ C)))  ((let goofball_demand (type goofball)) (let ⊥_type (type ⊥)) (let C_type (type C))))
(rewrite (type (create ⊥ C)) (Hom (ob ⊥) C) :when ((= (type ⊥) (Initial )) (= (type C) Ob)))

(function coproduct (TERM TERM) TERM)
(rule ((= goofball (coproduct A B)))  ((let goofball_demand (type goofball)) (let A_type (type A)) (let B_type (type B))))
(rewrite (type (coproduct A B)) (Coproduct A B) :when ((= (type A) Ob) (= (type B) Ob)))

(function ob (TERM) TERM)
(rule ((= goofball (ob ⨆)))  ((let goofball_demand (type goofball)) (let ⨆_type (type ⨆))))
(rewrite (type (ob ⨆)) Ob :when ((= (type ⨆) (Coproduct A B))))

(function coproj1 (TERM) TERM)
(rule ((= goofball (coproj1 ⨆)))  ((let goofball_demand (type goofball)) (let ⨆_type (type ⨆))))
(rewrite (type (coproj1 ⨆)) (Hom A (ob ⨆)) :when ((= (type ⨆) (Coproduct A B))))

(function coproj2 (TERM) TERM)
(rule ((= goofball (coproj2 ⨆)))  ((let goofball_demand (type goofball)) (let ⨆_type (type ⨆))))
(rewrite (type (coproj2 ⨆)) (Hom B (ob ⨆)) :when ((= (type ⨆) (Coproduct A B))))

(function copair (TERM TERM TERM) TERM)
(rule ((= goofball (copair ⨆ f g)))  ((let goofball_demand (type goofball)) (let ⨆_type (type ⨆)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (copair ⨆ f g)) (Hom (ob ⨆) C) :when ((= (type ⨆) (Coproduct A B)) (= (type f) (Hom A C)) (= (type g) (Hom B C))))

(function coequalizer (TERM TERM) TERM)
(rule ((= goofball (coequalizer f g)))  ((let goofball_demand (type goofball)) (let f_type (type f)) (let g_type (type g))))
(rewrite (type (coequalizer f g)) (Coequalizer f g) :when ((= (type f) (Hom A B)) (= (type g) (Hom A B))))

(function ob (TERM) TERM)
(rule ((= goofball (ob eq)))  ((let goofball_demand (type goofball)) (let eq_type (type eq))))
(rewrite (type (ob eq)) Ob :when ((= (type eq) (Coequalizer f g))))

(function proj (TERM) TERM)
(rule ((= goofball (proj eq)))  ((let goofball_demand (type goofball)) (let eq_type (type eq))))
(rewrite (type (proj eq)) (Hom B (ob eq)) :when ((= (type eq) (Coequalizer f g))))

(function factorize (TERM TERM TERM) TERM)
(rule ((= goofball (factorize coeq h coeq_h)))  ((let goofball_demand (type goofball)) (let coeq_type (type coeq)) (let h_type (type h)) (let coeq_h_type (type coeq_h))))
(rewrite (type (factorize coeq h coeq_h)) (Hom (ob coeq) (ob coeq_h)) :when ((= (type coeq) (Coequalizer f g)) (= (type h) (Hom B C)) (= (type coeq_h) (Coequalizer (⋅ f h) (⋅ g h)))))


(birewrite (compose (compose f g) h) (compose f (compose g h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom B C)) (= (type h) (Hom C D))))
(birewrite (compose f (id B)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (id A) f) f :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B))))
(birewrite (compose (coproj1 ⨆) (copair ⨆ f g)) f :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type ⨆) (Coproduct A B)) (= (type f) (Hom A C)) (= (type g) (Hom B C))))
(birewrite (compose (coproj2 ⨆) (copair ⨆ f g)) g :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type ⨆) (Coproduct A B)) (= (type f) (Hom A C)) (= (type g) (Hom B C))))
(birewrite f g :when ((= (type C) Ob) (= (type ⊥) (Initial )) (= (type f) (Hom (ob ⊥) C)) (= (type g) (Hom (ob ⊥) C))))
(birewrite (copair (compose (coproj1 ⨆) h) (compose (coproj2 ⨆) h)) h :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type ⨆) (Coproduct A B)) (= (type h) (Hom (ob ⨆) C))))
(birewrite (compose f (proj coeq)) (compose g (proj coeq)) :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B)) (= (type g) (Hom A B)) (= (type coeq) (Coequalizer f g))))
(birewrite (proj coeq) (id B) :when ((= (type A) Ob) (= (type B) Ob) (= (type f) (Hom A B)) (= (type coeq) (Coequalizer f f))))
(birewrite (compose (proj coeq) (factorize coeq h coeq_h)) (compose h (proj coeq_h)) :when ((= (type A) Ob) (= (type B) Ob) (= (type C) Ob) (= (type f) (Hom A B)) (= (type g) (Hom A B)) (= (type h) (Hom B C)) (= (type coeq) (Coequalizer f g)) (= (type coeq_h) (Coequalizer (⋅ f h) (⋅ g h)))))
(birewrite (factorize coeq (compose (proj coeq) k) coeq_k) k :when ((= (type A) Ob) (= (type B) Ob) (= (type D) Ob) (= (type f) (Hom A B)) (= (type g) (Hom A B)) (= (type coeq) (Coequalizer f g)) (= (type k) (Hom (ob coeq) D)) (= (type coeq_k) (Coequalizer (⋅ (⋅ f (proj coeq)) k) (⋅ (⋅ g (proj coeq)) k)))))
